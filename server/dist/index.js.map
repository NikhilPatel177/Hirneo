{"version":3,"sources":["../src/config/env.ts","../src/modules/auth/authRoutes.ts","../src/modules/auth/constants/cookies.ts","../src/modules/auth/utils/generateTokens.ts","../src/models/userModel.ts","../src/modules/auth/utils/generateUniqueUsername.ts","../src/modules/auth/controllers/googleOauthController.ts","../src/middlewares/validateSchemaMiddlware.ts","../src/modules/auth/schemas/registerSchema.ts","../src/modules/auth/utils/formattedUser.ts","../src/modules/auth/controllers/registerController.ts","../src/modules/auth/schemas/loginSchema.ts","../src/modules/auth/controllers/loginController.ts","../src/modules/auth/controllers/refreshTokenController.ts","../src/middlewares/isAuthenticatedMiddleware.ts","../src/modules/auth/controllers/getUserController.ts","../src/modules/auth/controllers/logoutController.ts","../src/app.ts","../src/index.ts","../src/config/db.ts"],"sourcesContent":["import dotenv from 'dotenv';\r\nimport z from 'zod';\r\n\r\ndotenv.config();\r\n\r\nconst envSchema = z.object({\r\n  PORT: z.string().transform(Number).default('3000'),\r\n  MONGO_URI: z.string().url(),\r\n  FRONTEND_URI: z.string().url(),\r\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\r\n\r\n  GOOGLE_CLIENT_REDIRECT_URI: z.string().url(),\r\n  GOOGLE_CLIENT_ID: z.string(),\r\n  GOOGLE_CLIENT_SECRET: z.string(),\r\n\r\n  REFRESH_TOKEN_SECRET: z.string(),\r\n  REFRESH_TOKEN_EXPIRY: z.string().default('7d'),\r\n  ACCESS_TOKEN_SECRET: z.string(),\r\n  ACCESS_TOKEN_EXPIRY: z.string().default('15m'),\r\n});\r\n\r\nconst result = envSchema.safeParse(process.env);\r\n\r\nif (!result.success) {\r\n  const errors = result.error.errors.map((e) => ({\r\n    path: e.path.join(''),\r\n    message: e.message,\r\n  }));\r\n\r\n  console.log('ENV variables error ❌', errors);\r\n  process.exit(1);\r\n}\r\n\r\nconst env = result.data;\r\nexport default env;\r\n","import { Router } from 'express';\r\nimport {\r\n  handleGoogleOauthCallback,\r\n  redirectToGoogleOauth,\r\n} from './controllers/googleOauthController.js';\r\nimport { validateSchema } from '@middlewares/validateSchemaMiddlware.js';\r\nimport { registerSchema } from './schemas/registerSchema.js';\r\nimport { registerUser } from './controllers/registerController.js';\r\nimport { loginSchema } from './schemas/loginSchema.js';\r\nimport { loginUser } from './controllers/loginController.js';\r\nimport { refreshingToken } from './controllers/refreshTokenController.js';\r\nimport { isAuthenticated } from '@middlewares/isAuthenticatedMiddleware.js';\r\nimport { getUser } from './controllers/getUserController.js';\r\nimport { logoutUser } from './controllers/logoutController.js';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/google', redirectToGoogleOauth);\r\nrouter.get('/google/callback', handleGoogleOauthCallback);\r\n\r\nrouter.post('/register', validateSchema(registerSchema), registerUser);\r\nrouter.post('/login', validateSchema(loginSchema), loginUser);\r\n\r\nrouter.get('/refresh-token', refreshingToken);\r\nrouter.get('/me', isAuthenticated, getUser);\r\n\r\nrouter.post('/logout', isAuthenticated, logoutUser);\r\n\r\nexport { router as authRoutes };\r\n","import env from '@config/env.js';\r\n\r\nexport const GOOGLE_COOKIE_OPTIONS = {\r\n  httpOnly: true,\r\n  secure: env.NODE_ENV === 'production',\r\n  maxAge: 15 * 60 * 1000, // 15 minutes\r\n  sameSite: 'lax' as const,\r\n};\r\n\r\nexport const REFRESHTOKEN_COOKIE_OPTIONS = {\r\n  httpOnly: true,\r\n  secure: env.NODE_ENV === 'production',\r\n  maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n  sameSite: 'strict' as const,\r\n};\r\n\r\n","import { IUser } from 'types/IUser.js';\r\nimport jwt from 'jsonwebtoken';\r\nimport env from '@config/env.js';\r\n\r\nexport const generateAccessToken = (user: IUser): string => {\r\n  return jwt.sign(\r\n    { _id: user._id, activeRole: user.activeRole },\r\n    env.ACCESS_TOKEN_SECRET,\r\n    { expiresIn: env.ACCESS_TOKEN_EXPIRY } as jwt.SignOptions\r\n  );\r\n};\r\n\r\nexport const generateRefreshToken = (user: IUser): string => {\r\n  return jwt.sign(\r\n    { _id: user._id, activeRole: user.activeRole },\r\n    env.REFRESH_TOKEN_SECRET,\r\n    { expiresIn: env.REFRESH_TOKEN_EXPIRY } as jwt.SignOptions\r\n  );\r\n};\r\n","import type { IUser } from 'types/IUser.js';\r\nimport mongoose, { Schema } from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst userSchema = new Schema<IUser>(\r\n  {\r\n    email: {\r\n      type: String,\r\n      unique: true,\r\n      required: true,\r\n      lowercase: true,\r\n    },\r\n    fullName: {\r\n      firstName: String,\r\n      lastName: String,\r\n    },\r\n    username: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: function (this: IUser) {\r\n        return !this.googleProviderId;\r\n      },\r\n    },\r\n    providers: {\r\n      type: [String],\r\n      enum: ['google', 'credentials'],\r\n      default: ['credentials'],\r\n    },\r\n    activeRole: {\r\n      type: String,\r\n      enum: ['client', 'freelancer'],\r\n      default: 'client',\r\n    },\r\n    roles: {\r\n      type: [String],\r\n      enum: ['client', 'freelancer'],\r\n      default: ['client'],\r\n    },\r\n    gender: {\r\n      type: String,\r\n      enum: ['male', 'female', 'other'],\r\n      default: 'male',\r\n    },\r\n\r\n    avatarUrl: String,\r\n    phone: String,\r\n    googleProviderId: String,\r\n    passwordResetToken: String,\r\n    refreshToken: String,\r\n    isEmailVerified: { type: Boolean, default: false },\r\n    isPhoneVerified: { type: Boolean, default: false },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nuserSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n\r\n  const salt = await bcrypt.genSalt(10);\r\n  this.password = await bcrypt.hash(this.password, salt);\r\n  next();\r\n});\r\n\r\nuserSchema.methods.comparePassword = async function (\r\n  enteredPassword: string\r\n): Promise<boolean> {\r\n  return await bcrypt.compare(enteredPassword, this.password);\r\n};\r\n\r\nconst UserModel = mongoose.model<IUser>('User', userSchema);\r\nexport default UserModel;\r\n","import UserModel from '@models/userModel.js';\r\n\r\nconst slugify = (str: string) => {\r\n  return str\r\n    .trim()\r\n    .toLowerCase()\r\n    .replace(/[^a-z0-9]+/g, '');\r\n};\r\n\r\nexport const generateUniqueUsername = async (fullName: string) => {\r\n  let base = slugify(fullName);\r\n  let username = base;\r\n  let count = 0;\r\n\r\n  while (await UserModel.exists({ username })) {\r\n    count += 1;\r\n    username = `${base}${count}`;\r\n  }\r\n  return username;\r\n};\r\n","import {\r\n  GOOGLE_COOKIE_OPTIONS,\r\n  REFRESHTOKEN_COOKIE_OPTIONS,\r\n} from '@auth/constants/cookies.js';\r\nimport { generateRefreshToken } from '@auth/utils/generateTokens.js';\r\nimport { generateUniqueUsername } from '@auth/utils/generateUniqueUsername.js';\r\nimport env from '@config/env.js';\r\nimport UserModel from '@models/userModel.js';\r\nimport * as arctic from 'arctic';\r\nimport { RequestHandler } from 'express';\r\n\r\nconst google = new arctic.Google(\r\n  env.GOOGLE_CLIENT_ID,\r\n  env.GOOGLE_CLIENT_SECRET,\r\n  env.GOOGLE_CLIENT_REDIRECT_URI\r\n);\r\n\r\nexport const redirectToGoogleOauth: RequestHandler = async (req, res) => {\r\n  try {\r\n    const state = arctic.generateState();\r\n    const codeVerifier = arctic.generateCodeVerifier();\r\n    const scopes = ['openid', 'profile', 'email'];\r\n\r\n    const roleSelected = req.query.role as string;\r\n    const redirectTo = req.query?.redirectTo as string;\r\n    const isRole = roleSelected !== 'NA' ? true : false;\r\n\r\n    const url = google.createAuthorizationURL(state, codeVerifier, scopes);\r\n\r\n    res.cookie('state', state, GOOGLE_COOKIE_OPTIONS);\r\n\r\n    res.cookie('codeVerifier', codeVerifier, GOOGLE_COOKIE_OPTIONS);\r\n\r\n    if (isRole) {\r\n      res.cookie('oauthRole', roleSelected, GOOGLE_COOKIE_OPTIONS);\r\n    }\r\n    if (redirectTo) {\r\n      res.cookie('oauthRedirectTo', redirectTo, GOOGLE_COOKIE_OPTIONS);\r\n    }\r\n    return res.redirect(url.toString());\r\n  } catch (error) {\r\n    console.error('Google Oauth redirection failed :', error);\r\n    return res.redirect(`${env.FRONTEND_URI}/google/failed`);\r\n  }\r\n};\r\n\r\nexport const handleGoogleOauthCallback: RequestHandler = async (req, res) => {\r\n  try {\r\n    const code = req.query.code;\r\n    const codeVerifier = req.cookies.codeVerifier;\r\n    const role = req.cookies?.oauthRole || 'client';\r\n    const redirectTo = req.cookies?.oauthRedirectTo || '/';\r\n\r\n    if (!code || typeof code !== 'string' || !codeVerifier) {\r\n      return res.redirect(`${env.FRONTEND_URI}/google/failed`);\r\n    }\r\n\r\n    const token = await google.validateAuthorizationCode(code, codeVerifier);\r\n    const idToken = token.idToken();\r\n    const claims = arctic.decodeIdToken(idToken) as ClaimsType;\r\n\r\n    let isUser = await UserModel.findOne({ email: claims.email });\r\n\r\n    if (!isUser) {\r\n      const basename = claims.name || claims.email.split('@')[0] || 'user';\r\n      const username = await generateUniqueUsername(basename);\r\n\r\n      isUser = await UserModel.create({\r\n        email: claims.email,\r\n        avatarUrl: claims.picture,\r\n        isEmailVerified: true,\r\n        username,\r\n        fullName: {\r\n          firstName: claims.given_name,\r\n          lastName: claims.family_name,\r\n        },\r\n        providers: ['google'],\r\n        googleProviderId: claims.sub,\r\n        roles: role ? role.split(',') : ['client'],\r\n        activeRole: role && role === 'freelancer' ? 'freelancer' : 'client',\r\n      });\r\n    } else {\r\n      if (!isUser.googleProviderId && !isUser.providers.includes('google')) {\r\n        isUser.isEmailVerified = true;\r\n        isUser.providers.push('google');\r\n        isUser.googleProviderId = claims.sub;\r\n      }\r\n    }\r\n\r\n    const refreshToken = generateRefreshToken(isUser);\r\n    isUser.refreshToken = refreshToken;\r\n    await isUser.save();\r\n\r\n    res.clearCookie('oauthRole');\r\n    res.clearCookie('oauthRedirectTo');\r\n    res.clearCookie('state');\r\n    res.clearCookie('codeVerifier');\r\n    res.cookie('refreshToken', refreshToken, REFRESHTOKEN_COOKIE_OPTIONS);\r\n\r\n    return res.redirect(`${env.FRONTEND_URI}${redirectTo || '/'}`);\r\n  } catch (error) {\r\n    console.error('Google Oauth completion failed :', error);\r\n    return res.redirect(`${env.FRONTEND_URI}/google/failed`);\r\n  }\r\n};\r\n\r\ntype ClaimsType = {\r\n  sub: string;\r\n  name: string;\r\n  picture: string;\r\n  given_name: string;\r\n  family_name: string;\r\n  iat: number;\r\n  exp: number;\r\n  email: string;\r\n  iss: string;\r\n  azp: string;\r\n  aud: string;\r\n  at_hash: string;\r\n  email_verified: boolean;\r\n};\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { ZodSchema } from 'zod';\r\n\r\nexport const validateSchema = <T>(schema: ZodSchema<T>) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    if (!req.body || Object.keys(req.body).length === 0) {\r\n      return res.status(400).json({ message: 'Please provide data' });\r\n    }\r\n\r\n    const result = schema.safeParse(req.body);\r\n\r\n    if (!result.success) {\r\n      const errors = result.error.errors.map((e) => ({\r\n        field: e.path.join(''),\r\n        message: e.message,\r\n      }));\r\n      return res.status(400).json({ message: 'Validation Error', errors });\r\n    }\r\n\r\n    req.validatedData = result.data;\r\n    next();\r\n  };\r\n};\r\n","import z from 'zod';\r\n\r\nexport const registerSchema = z.object({\r\n  email: z.string().min(1, 'Email is required').email('Invalid email address'),\r\n  password: z\r\n    .string()\r\n    .min(1, 'Password is required')\r\n    .min(6, 'Password must be at least 6 characters'),\r\n  role: z\r\n    .array(z.enum(['client', 'freelancer']))\r\n    .min(1, 'Atleast one role is required'),\r\n});\r\n\r\nexport type RegisterType = z.infer<typeof registerSchema>;\r\n","import { AuthUserType } from 'types/authUserType.js';\r\nimport { IUser } from 'types/IUser.js';\r\n\r\nexport const getFormattedUser = (user: IUser): AuthUserType => {\r\n  return {\r\n    _id: user._id,\r\n    activeRole: user.activeRole,\r\n    avatarUrl: user.avatarUrl,\r\n    createdAt: user.createdAt,\r\n    email: user.email,\r\n    fullName: user.fullName,\r\n    gender: user.gender,\r\n    isEmailVerified: user.isEmailVerified,\r\n    isPhoneVerified: user.isPhoneVerified,\r\n    phone: user.phone,\r\n    username: user.username,\r\n  };\r\n};\r\n","import { REFRESHTOKEN_COOKIE_OPTIONS } from '@auth/constants/cookies.js';\r\nimport { RegisterType } from '@auth/schemas/registerSchema.js';\r\nimport { getFormattedUser } from '@auth/utils/formattedUser.js';\r\nimport {\r\n  generateAccessToken,\r\n  generateRefreshToken,\r\n} from '@auth/utils/generateTokens.js';\r\nimport { generateUniqueUsername } from '@auth/utils/generateUniqueUsername.js';\r\nimport UserModel from '@models/userModel.js';\r\nimport { RequestHandler } from 'express';\r\n\r\nexport const registerUser: RequestHandler = async (req, res) => {\r\n  const data = req.validatedData as RegisterType;\r\n\r\n  try {\r\n    const user = await UserModel.findOne({ email: data.email });\r\n\r\n    if (user) {\r\n      return res.status(400).json({\r\n        message: 'User already exists, Login with it or try another email.',\r\n      });\r\n    }\r\n\r\n    const basename = data.email.split('@')[0] || 'user';\r\n    const username = await generateUniqueUsername(basename);\r\n    const newUser = await UserModel.create({\r\n      email: data.email,\r\n      password: data.password,\r\n      roles: data.role,\r\n      username,\r\n      activeRole: data.role[0],\r\n    });\r\n    const refreshToken = generateRefreshToken(newUser);\r\n    const accessToken = generateAccessToken(newUser);\r\n\r\n    newUser.refreshToken = refreshToken;\r\n    await newUser.save();\r\n\r\n    res.cookie('refreshToken', refreshToken, REFRESHTOKEN_COOKIE_OPTIONS);\r\n\r\n    const userData = getFormattedUser(newUser);\r\n    return res.status(201).json({\r\n      message: 'User registration successfull',\r\n      accessToken,\r\n      userData,\r\n    });\r\n  } catch (error) {\r\n    console.error('Registration failed :', error);\r\n    res.status(500).json({ message: 'Something went wrong' });\r\n  }\r\n};\r\n","import z from 'zod';\r\n\r\nexport const loginSchema = z.object({\r\n  identifier: z.string().min(1, 'Email or either username is required'),\r\n  password: z.string().min(1, 'Password is required'),\r\n});\r\n\r\nexport type LoginType = z.infer<typeof loginSchema>;\r\n","import { REFRESHTOKEN_COOKIE_OPTIONS } from '@auth/constants/cookies.js';\r\nimport { LoginType } from '@auth/schemas/loginSchema.js';\r\nimport { getFormattedUser } from '@auth/utils/formattedUser.js';\r\nimport {\r\n  generateAccessToken,\r\n  generateRefreshToken,\r\n} from '@auth/utils/generateTokens.js';\r\nimport UserModel from '@models/userModel.js';\r\nimport { RequestHandler } from 'express';\r\n\r\nexport const loginUser: RequestHandler = async (req, res) => {\r\n  const data = req.validatedData as LoginType;\r\n  try {\r\n    const user = await UserModel.findOne({\r\n      $or: [{ email: data.identifier }, { username: data.identifier }],\r\n    });\r\n\r\n    if (!user) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: 'No user found with email you gave' });\r\n    }\r\n\r\n    const isPasswordCorrect = await user.comparePassword(data.password);\r\n\r\n    if (!isPasswordCorrect) {\r\n      return res\r\n        .status(400)\r\n        .json({ errors: [{ field: 'password', message: 'Invalid password' }] });\r\n    }\r\n\r\n    const accessToken = generateAccessToken(user);\r\n    const refreshToken = generateRefreshToken(user);\r\n\r\n    user.refreshToken = refreshToken;\r\n    await user.save();\r\n\r\n    res.cookie('refreshToken', refreshToken, REFRESHTOKEN_COOKIE_OPTIONS);\r\n\r\n    const userData = getFormattedUser(user);\r\n    return res.status(200).json({\r\n      message: `Welcome back, ${user.fullName.firstName || 'User'}`,\r\n      accessToken,\r\n      userData,\r\n    });\r\n  } catch (error) {\r\n    console.log('Login failed :', error);\r\n    res.status(500).json({ message: 'Something went wrong' });\r\n  }\r\n};\r\n","import { REFRESHTOKEN_COOKIE_OPTIONS } from '@auth/constants/cookies.js';\r\nimport {\r\n  generateAccessToken,\r\n  generateRefreshToken,\r\n} from '@auth/utils/generateTokens.js';\r\nimport env from '@config/env.js';\r\nimport UserModel from '@models/userModel.js';\r\nimport { RequestHandler } from 'express';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport const refreshingToken: RequestHandler = async (req, res) => {\r\n  const refreshToken = req.cookies.refreshToken;\r\n\r\n  if (!refreshToken) {\r\n    return res.status(400).json({ message: 'No refresh token provided' });\r\n  }\r\n\r\n  try {\r\n    const decoded = jwt.verify(refreshToken, env.REFRESH_TOKEN_SECRET) as {\r\n      _id: string;\r\n    };\r\n\r\n    const user = await UserModel.findById(decoded._id);\r\n    if (!user) {\r\n      return res.status(403).json({ message: 'Invalid or expired token' });\r\n    }\r\n    const accessToken = generateAccessToken(user);\r\n    const newRefreshToken = generateRefreshToken(user);\r\n\r\n    user.refreshToken = newRefreshToken;\r\n    await user.save();\r\n\r\n    res.cookie('refreshToken', newRefreshToken, REFRESHTOKEN_COOKIE_OPTIONS);\r\n\r\n    return res.status(200).json({\r\n      message: 'Tokens refreshed successfully',\r\n      accessToken,\r\n    });\r\n  } catch (error) {\r\n    console.error('Token refresh failed:', error);\r\n\r\n    if (\r\n      error instanceof jwt.TokenExpiredError ||\r\n      error instanceof jwt.JsonWebTokenError\r\n    ) {\r\n      res.clearCookie('refreshToken', REFRESHTOKEN_COOKIE_OPTIONS);\r\n      return res\r\n        .status(403)\r\n        .json({ message: 'Invalid or expired refresh token' });\r\n    }\r\n\r\n    return res.status(500).json({ message: 'Something went wrong' });\r\n  }\r\n};\r\n","import env from '@config/env.js';\r\nimport { RequestHandler } from 'express';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\r\n  let accessToken = req.headers.authorization;\r\n\r\n  if (!accessToken || !accessToken.includes('Bearer ')) {\r\n    return res.status(401).json({\r\n      message: 'Invalid or missing token',\r\n    });\r\n  }\r\n\r\n  accessToken = accessToken.split(' ')[1];\r\n  try {\r\n    const decodedToken = jwt.verify(accessToken, env.ACCESS_TOKEN_SECRET);\r\n\r\n    if (typeof decodedToken === 'string') {\r\n      return res.status(403).json({ message: 'Invalid token payload' });\r\n    }\r\n\r\n    req.user = decodedToken as {\r\n      _id: string;\r\n      activeRole: 'freelancer' | 'client';\r\n      iat: number;\r\n      exp: number;\r\n    };\r\n\r\n    next();\r\n  } catch (error) {\r\n    console.error('Token refresh failed:', error);\r\n\r\n    if (\r\n      error instanceof jwt.TokenExpiredError ||\r\n      error instanceof jwt.JsonWebTokenError\r\n    ) {\r\n      return res\r\n        .status(401)\r\n        .json({ message: 'Invalid or expired access token' });\r\n    }\r\n\r\n    return res.status(500).json({ message: 'Something went wrong' });\r\n  }\r\n};\r\n","import { getFormattedUser } from '@auth/utils/formattedUser.js';\r\nimport UserModel from '@models/userModel.js';\r\nimport { RequestHandler } from 'express';\r\n\r\nexport const getUser: RequestHandler = async (req, res) => {\r\n  const user = req.user;\r\n\r\n  if (!user?._id) {\r\n    return res.status(401).json({ message: 'Unauthorized' });\r\n  }\r\n\r\n  try {\r\n    const isUser = await UserModel.findById(user._id);\r\n    if (!isUser) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    const userData = getFormattedUser(isUser);\r\n    return res.status(200).json({\r\n      message: 'User data fetched successfully',\r\n      userData,\r\n    });\r\n  } catch (error) {\r\n    console.log('Get user failed :', error);\r\n    res.status(500).json({ message: 'Something went wrong' });\r\n  }\r\n};\r\n","import { REFRESHTOKEN_COOKIE_OPTIONS } from '@auth/constants/cookies.js';\r\nimport UserModel from '@models/userModel.js';\r\nimport { RequestHandler } from 'express';\r\n\r\nexport const logoutUser: RequestHandler = async (req, res) => {\r\n  const user = req.user;\r\n\r\n  if (!user?._id) {\r\n    return res.status(401).json({ message: 'Unauthorized' });\r\n  }\r\n\r\n  try {\r\n    const isUser = await UserModel.findById(user._id);\r\n    if (!isUser) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    isUser.refreshToken = undefined;\r\n    await isUser.save();\r\n\r\n    res.clearCookie('refreshToken', REFRESHTOKEN_COOKIE_OPTIONS);\r\n    return res.status(200).json({\r\n      message: 'Logged out successfully',\r\n    });\r\n  } catch (error) {\r\n    console.log('Logout failed :', error);\r\n    res.status(500).json({ message: 'Something went wrong' });\r\n  }\r\n};\r\n","import { authRoutes } from '@auth/authRoutes.js';\r\nimport cookieParser from 'cookie-parser';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport env from '@config/env.js';\r\n\r\nconst app = express();\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(cookieParser());\r\napp.use(cors({ origin: env.FRONTEND_URI, credentials: true }));\r\n\r\napp.use('/api/auth', authRoutes);\r\n\r\nexport default app;\r\n","import env from '@config/env.js';\r\nimport app from './app.js';\r\nimport http from 'node:http';\r\nimport { connectDb } from '@config/db.js';\r\n\r\nconst server = http.createServer(app);\r\nconst PORT = env.PORT;\r\n\r\n(async () => {\r\n  try {\r\n    await connectDb();\r\n    server.listen(PORT, () => {\r\n      console.log('Server is running on port', PORT);\r\n    });\r\n  } catch (error) {\r\n    console.log('Server listening error ❌', error);\r\n    process.exit(1);\r\n  }\r\n})();\r\n","import env from '@config/env.js';\r\nimport mongoose from 'mongoose';\r\n\r\nexport const connectDb = async () => {\r\n  try {\r\n    await mongoose.connect(env.MONGO_URI);\r\n    console.log('Db connected ✅');\r\n  } catch (error) {\r\n    console.log('Db connection error :', error);\r\n    process.exit(1);\r\n  }\r\n};\r\n"],"mappings":"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","names":["result","z","z","jwt","jwt","mongoose"]}